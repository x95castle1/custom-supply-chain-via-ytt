apiVersion: v1
kind: Secret
metadata:
  name: ootb-supply-chain-overlay
  namespace: tap-install
type: Opaque
stringData:
  ootb-supply-chain-overlay.yaml: |
    #@ load("@ytt:overlay", "overlay")
    #@ load("@ytt:template", "template")
            
    #! This first overlay is an example of removing a step from the supply ootb-supply-chain-overlay
    #! For example, let's say you don't want to test or scan source code, but you do images
    #! then this overlay will remove the first step. 
    #@overlay/match by=overlay.subset({"apiVersion": "carto.run/v1alpha1", "kind": "ClusterSupplyChain","metadata":{"name":"source-test-scan-to-url"}}), expects="0+"
    ---
    spec:
      resources:
      #@overlay/match by="name", expects="0+"
      #@overlay/remove
      - name: source-tester

    #! This will remove the source scanning step
    #@overlay/match by=overlay.subset({"apiVersion": "carto.run/v1alpha1", "kind": "ClusterSupplyChain","metadata":{"name":"source-test-scan-to-url"}}), expects="0+"
    ---
    spec:
      resources:
      #@overlay/match by="name", expects="0+"
      #@overlay/remove
      - name: source-scanner

    #! This overlay takes the image-provider step and changes it sources to the output 
    #! of the source-provider step instead of the source-scanner step. 
    #! This creates a connection between those steps in the supply chain.
    #@overlay/match by=overlay.subset({"apiVersion": "carto.run/v1alpha1", "kind": "ClusterSupplyChain","metadata":{"name":"source-test-scan-to-url"}}), expects="0+"
    ---
    spec:
      resources:
      #@overlay/match by="name", expects="0+"
      - name: image-provider
        #@overlay/replace
        sources:
        - resource: source-provider
          name: source

    #! This overlay removes the creation of the deliverable from the supply chain.
    #! We will be writing the deliverable to git config repo instead
    #@overlay/match by=overlay.subset({"apiVersion": "carto.run/v1alpha1", "kind": "ClusterSupplyChain","metadata":{"name":"source-test-scan-to-url"}}), expects="0+"
    ---
    spec:
      resources:
      #@overlay/match by="name", expects="0+"
      #@overlay/remove
      - name: deliverable

    #! This overlay adds two additional steps to the supply chain to config-writer
    #! the deliverable produced by the supply chain to a git config repo.
    #! The deliverable-config and deliverable-config-writer steps are new
    #! supply chain steps introducted to write the deliverable to a configmap
    #! and then write it to a config repo in git. 
    #@overlay/match by=overlay.subset({"kind":"ClusterSupplyChain"}), expects="0+"
    ---
    spec:
      resources:
      #@overlay/match by="name", expects="0+"
      - name: config-writer
      #@overlay/append
      - name: deliverable-config
        configs:
          - resource: config-writer
            name: config   
        templateRef:
          kind: ClusterConfigTemplate
          name: config-deliverable-template  
      - name: deliverable-config-writer
        configs:
        - name: config
          resource: deliverable-config    
        params:
        - name: serviceAccount
          value: default
        templateRef:
          kind: ClusterTemplate
          name: config-writer-deliverable-template

    #! This step changes the config-writer step from a ClusterTemplate to a 
    #! ClusterConfigTemplate. This needs to change to allow the last step of the 
    #! ootb supply chain to pass control to the new deliverable-config step.
    #@overlay/match by=overlay.subset({"kind":"ClusterSupplyChain"}), expects="0+"
    ---
    spec:
      resources:
      #@overlay/match by="name", expects="0+"
      - name: config-writer
        #@overlay/replace
        templateRef:
          kind: ClusterConfigTemplate
          name: config-writer-template
          
         